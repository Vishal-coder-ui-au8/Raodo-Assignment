{"version":3,"sources":["utils/util.js","actions/list_action.js","middleware/store.js","components/Header.js","components/Word_Card.js","components/Word_Detail.js","components/Add_Word.js","components/Words_List.js","components/Search.js","App.js","index.js","reducers/list_reducer.js"],"names":["client","ApolloClient","uri","cache","InMemoryCache","getAllWords","a","query","gql","result","data","words","addNewWord","word","mutate","mutation","addWord","console","log","RECEIVE_WORDS","ADD_NEW_WORD","handleInitialData","dispatch","then","type","receiveWords","applyMiddleware","thunk","Header","className","Typography","variant","to","IconButton","color","Word_Card","props","Card","CardActionArea","onClick","handleClick","CardContent","gutterBottom","component","entries","map","entry","index","style","marginTop","partOfSpeech","definitions","Transition","React","forwardRef","ref","Slide","direction","Word_Detail","Dialog","fullScreen","open","onClose","handleClose","TransitionComponent","edge","padding","Divider","origin","length","paddingLeft","fontSize","examples","example","Add_Word","state","input","isDuplicate","loading","this","setState","some","e","handleAddWord","res","enqueueSnackbar","catch","DialogTitle","id","DialogContent","TextField","autoFocus","margin","label","onKeyUp","setInput","target","value","fullWidth","DialogActions","Button","CircularProgress","disabled","handleAddButton","Component","connect","withSnackbar","Words_List","openDetailModal","openAddWordModal","modalData","prevState","wordName","filter","toggleModal","text","bind","toggleAddNewWordModal","Search","searchResult","debounce","expression","regex","RegExp","match","placeholder","onChange","theme","createTheme","typography","fontFamily","App","ThemeProvider","anchorOrigin","vertical","horizontal","exact","path","store","createStore","action","middleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c0b154fc.chunk.js","sourcesContent":["//Apollo Client is a state management library for JavaScript that enables you to manage both local and remote data with GraphQL. \r\n//Use it to fetch, cache, and modify application data, all while automatically updating your UI.\r\nimport { ApolloClient, InMemoryCache, gql } from \"@apollo/client\";\r\n\r\nconst serverUrl = \"http://localhost:5000/graphql\"\r\n\r\n//uri specifies the URL of our GraphQL server.\r\n//cache is an instance of InMemoryCache, which Apollo Client uses to cache query results after fetching them.It will be fatser to \r\n//get data from the cache after fetching.\r\nconst client = new ApolloClient({\r\n    uri: serverUrl,\r\n    cache: new InMemoryCache()\r\n})\r\n\r\n//created a function that accepts a GraphQL query body and uses Fetch to retrieve the result from the API.\r\n//\r\nexport const getAllWords = async () => {\r\n    const result = await client\r\n        .query({\r\n            query: gql`\r\n            {\r\n                words{\r\n                    word\r\n                    entries{\r\n                        partOfSpeech\r\n                        origin\r\n                        definitions\r\n                        examples\r\n                    }\r\n                }\r\n            }`\r\n        })\r\n    return result.data.words\r\n}\r\n\r\n//Mutations are a way to modify your remote and local data.\r\n//mutations represent the state-changing methods similar to a PUT, POST, or DELETE request in REST\r\nexport const addNewWord = async (word) => {\r\n    const result = await client\r\n        .mutate({\r\n            mutation: gql`\r\n            mutation{\r\n                addWord(word:\"${word}\"){\r\n                    word\r\n                    entries{\r\n                        partOfSpeech\r\n                        origin\r\n                        definitions\r\n                        examples\r\n                    }\r\n                }\r\n            }`\r\n        })\r\n    if (result.data.addWord.word === null) return false\r\n    console.log(result.data.addWord);\r\n    return result.data.addWord\r\n}","import { addNewWord, getAllWords } from \"../utils/util\";\r\n\r\nexport const RECEIVE_WORDS = 'RECEIVE_WORDS'\r\nexport const ADD_NEW_WORD = 'ADD_NEW_WORD'\r\n\r\nexport const receiveWords = (words) => {\r\n    return {\r\n        type: RECEIVE_WORDS,\r\n        words\r\n    }\r\n}\r\n\r\nexport const addWord = (word) => {\r\n    return {\r\n        type: ADD_NEW_WORD,\r\n        word\r\n    }\r\n}\r\n\r\nexport const handleAddWord = (word) => {\r\n    //dispatch() is the method used to dispatch actions and trigger state changes to the store.\r\n    //With React Redux, your components never access the store directly - connect does it for you\r\n    return dispatch => {\r\n        return addNewWord(word)\r\n            .then(word => dispatch(addWord(word)))\r\n    }\r\n}\r\n\r\nexport const handleInitialData = (words) => {\r\n    return dispatch => {\r\n        return getAllWords()\r\n            .then(words => dispatch(receiveWords(words)))\r\n    }\r\n}","import thunk from \"redux-thunk\";\r\nimport { applyMiddleware } from \"redux\";\r\n\r\n//You can't use fetch in actions without middleware. Actions must be plain objects. You can use a middleware like redux-thunk \r\n//to do fetch and then dispatch another action.\r\nexport default applyMiddleware(thunk)","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\n//Typography is a Material-UI component used to standardize the text and its related CSS properties without worrying about browser \r\n//compatibility issues.\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\n\r\nexport default function Header() {\r\n    return (\r\n        <div className=\"header\">\r\n            <Typography className=\"logo\" variant=\"h6\">\r\n                Vocab\r\n            </Typography>\r\n            <Link to='/search'>\r\n                <IconButton aria-label=\"search\" color=\"inherit\">\r\n                    <SearchIcon />\r\n                </IconButton>\r\n            </Link>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nexport default function Word_Card(props) {\r\n    return (\r\n        <Card>\r\n            <CardActionArea onClick={props.handleClick}>\r\n                <CardContent>\r\n                    {/* mapping the details of the particular word */}\r\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                        {props.word.word}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"div\">\r\n                        {props.word.entries && props.word.entries.map((entry, index) => (\r\n                            <p style={{ marginTop: 10 }} key={index}>({entry.partOfSpeech}) {entry.definitions[0]}</p>\r\n                        ))}\r\n                    </Typography>\r\n                </CardContent>\r\n            </CardActionArea>\r\n        </Card>\r\n    )\r\n}\r\n","import React, { Fragment } from \"react\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport Slide from \"@material-ui/core/Slide\";\r\n\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    //Slide direction onclick for word details the modal will open in a direction from dowm to up transition\r\n    return <Slide direction=\"up\" ref={ref} {...props} />\r\n})\r\n\r\nexport default function Word_Detail(props) {\r\n    //unpacking the properties of an object to props\r\n    const { word } = props\r\n    return (\r\n        <Dialog fullScreen open={props.open} onClose={props.handleClose} TransitionComponent={Transition}>\r\n            <div className='closeBar'>\r\n                <IconButton edge=\"end\" color=\"inherit\" onClick={() => props.handleClose()} aria-label=\"close\">\r\n                    <CloseIcon />\r\n                </IconButton>\r\n            </div>\r\n            <div style={{ padding: '10px 20px' }}>\r\n                {/* to assign a title for the word conditionally using ? Either the expression is true and returns the value after\r\n                 the question mark (?) or the expression is false and returns the value after the colon (:). which is empty(or) null\r\n                  at the closing tag*/}\r\n                {word.word ? (\r\n                    <Fragment>\r\n\r\n                        {/* to assign a title for the word*/}\r\n                        <Typography variant=\"h3\" component=\"h2\">\r\n                            {word.word}\r\n                        </Typography>\r\n                        <Divider style={{ marginTop: 10 }} />\r\n                        {/* mapping the details of the particular word */}\r\n                        {word.entries.map((entry, index) => (\r\n                            <div key={index} style={{ marginTop: 10 }}>\r\n                                <Typography variant=\"body2\" color=\"textSecondary\" component=\"i\">\r\n                                    {entry.partOfSpeech}\r\n                                </Typography>\r\n                                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                                    {entry.origin.length !== 0 && (<span>Origin:</span>)} {entry.origin[0]}\r\n                                </Typography>\r\n                                <Typography variant=\"subtitle2\" style={{ marginTop: 10 }} component=\"p\">\r\n                                    {entry.definitions[0]}\r\n                                </Typography>\r\n                                <ul style={{ paddingLeft: 30, fontSize: '14px', marginTop: 10 }}>\r\n                                    {entry.examples.map((example, index) => (<li key={index}>{example}</li>))}\r\n                                </ul>\r\n                                <Divider style={{ marginTop: 10 }} />\r\n                            </div>\r\n                        ))}\r\n                    </Fragment>\r\n                ):''}\r\n            </div>\r\n        </Dialog>\r\n    )\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n//withSnackbar:- Export any component that needs to send notification using withSnackbar. By doing this, you'll have access to two \r\n//               methods enqueueSnackbar and closeSnackbar. Below is the enqueueSnackbar method to show error mesages.\r\nimport { withSnackbar } from \"notistack\";\r\nimport { handleAddWord } from \"../actions/list_action\";\r\n\r\nclass Add_Word extends Component {\r\n    state = {\r\n        input: '',\r\n        isDuplicate: false,\r\n        loading: false\r\n    }\r\n\r\n    setInput(input) {\r\n        this.setState({ input })\r\n        const isDuplicate = this.props.words.some(word => word.word === input)\r\n        if (isDuplicate) this.setState({ isDuplicate })\r\n        else this.setState({ isDuplicate })\r\n    }\r\n\r\n    handleAddButton(e) {\r\n        if (this.state.input !== '') {\r\n            this.setState({ loading: true })\r\n            this.props.handleAddWord(this.state.input)\r\n                .then(res => {\r\n                    if (!res.word) this.props.enqueueSnackbar(\"Unable to add new word\")\r\n                    else this.props.enqueueSnackbar(\"New word is added to dictionary\")\r\n                    this.props.handleClose()\r\n                    this.setState({ loading: false })\r\n                })\r\n                .catch(() => this.props.enqueueSnackbar(\"Unable to add new word\"))\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { open, handleClose } = this.props\r\n        return (\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n                <DialogTitle id=\"form-dialog-title\">Add To Dictionary</DialogTitle>\r\n                <DialogContent>\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        id=\"word\"\r\n                        label=\"New Word\"\r\n                        type=\"Text\"\r\n                        onKeyUp={e => this.setInput(e.target.value)}\r\n                        fullWidth\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    {/* if the word already exists in the words list the add button will get disabled to add */}\r\n                    {this.state.loading ?\r\n                        (<Button><CircularProgress color=\"secondary\" /></Button>) :\r\n                        (<Button disabled={this.state.isDuplicate} onClick={(e) => this.handleAddButton(e)} color=\"primary\">\r\n                            Add\r\n                        </Button>)}\r\n                </DialogActions>\r\n            </Dialog >\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (words) => {\r\n    return {\r\n        words\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { handleAddWord })(withSnackbar(Add_Word));\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport WordCard from \"./Word_Card\";\r\nimport WordDetail from \"./Word_Detail\";\r\nimport AddWordModal from \"./Add_Word\";\r\nimport { handleInitialData } from \"../actions/list_action\";\r\n\r\nclass Words_List extends Component {\r\n    state = {\r\n        openDetailModal: false,\r\n        openAddWordModal: false,\r\n        modalData: {}\r\n    }\r\n    // new state update depends on the previous state, we use the functional form of setState which accepts as argument a function that returns a new state.\r\n    toggleAddNewWordModal() {\r\n        this.setState(prevState => ({\r\n            openAddWordModal: !prevState.openAddWordModal\r\n        }))\r\n    }\r\n    // new state update depends on the previous state, we use the functional form of setState which accepts as argument a function that returns a new state.\r\n    toggleModal() {\r\n        this.setState(prevState => ({\r\n            openDetailModal: !prevState.openDetailModal\r\n        }))\r\n    }\r\n\r\n    handleClick(wordName) {\r\n        const modalData = this.props.words.filter(word => word.word === wordName)[0]\r\n        console.log(modalData)\r\n        this.setState({ modalData })\r\n        this.toggleModal()\r\n    }\r\n\r\n    render() {\r\n        const { words } = this.props\r\n        const { openDetailModal, modalData, openAddWordModal } = this.state\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <h4 className=\"heading\">{this.props.text}</h4>\r\n                <Divider />\r\n                <div className=\"word-container\">\r\n                    {/* mapping to go to the particular page while clicking on the element */}\r\n                    {words.map(word => (\r\n                        <WordCard key={word.word} handleClick={() => this.handleClick(word.word)} word={word} />\r\n                    ))}\r\n                </div>\r\n                {/* to open details page */}\r\n                <WordDetail word={modalData} handleClose={this.toggleModal.bind(this)} open={openDetailModal} />\r\n                {/* to open add form  */}\r\n                <AddWordModal handleClose={this.toggleAddNewWordModal.bind(this)} open={openAddWordModal} />\r\n                {/* Button to add new word */}\r\n                <div className=\"addButton\">\r\n                    <IconButton onClick={() => this.toggleAddNewWordModal()} edge=\"end\" color=\"inherit\" aria-label=\"close\">\r\n                        <AddIcon />\r\n                    </IconButton>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (words) => {\r\n    return {\r\n        words\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { handleInitialData })(Words_List)","//Fragment is a replace of <div> where fragment works faster than <div> while rendering multiple items.\r\nimport React, { Component, Fragment } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport WordCard from \"./Word_Card\";\r\nimport WordDetail from \"./Word_Detail\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport debounce from \"lodash.debounce\";\r\nimport { handleInitialData } from \"../actions/list_action\";\r\n\r\nclass Search extends Component {\r\n    state = {\r\n        input: '',\r\n        searchResult: [],\r\n        openDetailModal: false,\r\n        modalData: {}\r\n    }\r\n\r\n    //debounce fn  which delays the given fn until the given waiting time has passed\r\n    setInput = debounce((input) => {\r\n        this.setState({ input })\r\n        //make a filter more specialized and characters that define a pattern of text to be matched\r\n        const expression = `.*${this.state.input}.*`\r\n        const regex = new RegExp(expression, \"g\");\r\n        const searchResult = this.props.words.filter(word => word.word.match(regex))\r\n        this.setState({ searchResult })\r\n        //if found when comparing the given input and search result\r\n        if (this.state.input === '') this.setState({ searchResult: [] })\r\n    }, 1000)\r\n\r\n    //task:- a model appears to search the wordlist by clicking on search option\r\n    // new state update depends on the previous state, we use the functional form of setState which accepts as argument a function that returns a new state.\r\n    toggleModal() {\r\n        this.setState(prevState => ({\r\n            openDetailModal: !prevState.openDetailModal\r\n        }))\r\n    }\r\n    \r\n    //to handle the page to next procedure by clicking on the displayed words\r\n    handleClick(wordName) {\r\n        const modalData = this.props.words.filter(word => word.word === wordName)[0]\r\n        console.log(modalData)\r\n        this.setState({ modalData })\r\n        this.toggleModal()\r\n    }\r\n\r\n    render() {\r\n        const words = this.state.searchResult\r\n        const { openDetailModal, modalData } = this.state\r\n\r\n        return (\r\n            <Fragment>\r\n                <div className=\"header\" >\r\n                    <input\r\n                        type=\"text\"\r\n                        className=\"searchInput\"\r\n                        placeholder=\"Search\"\r\n                        onChange={e => this.setInput(e.target.value)}\r\n                    />\r\n                    <Link to='/'>\r\n                        <IconButton aria-label=\"close\" color=\"inherit\">\r\n                            <CloseIcon />\r\n                        </IconButton>\r\n                    </Link>\r\n                </div>\r\n                <div className=\"container\">\r\n                    <div className=\"word-container\">\r\n                        {/* Mapping to display the word you are searching */}\r\n                        {/* Mapping present information in a visual way.  */}\r\n                        {words.map(word => (\r\n                            <WordCard key={word.word} handleClick={() => this.handleClick(word.word)} word={word} />\r\n                        ))}\r\n                    </div>\r\n\r\n                    {/* by clicking on the displayed word it will opens a new modal having detail of the word */}\r\n                    <WordDetail word={modalData} handleClose={this.toggleModal.bind(this)} open={openDetailModal} />\r\n                </div>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\n//mapStateToProps is used for selecting the part of the data from the store that the connected component needs\r\n// The argument mentioned as words is the entire redux store state\r\nconst mapStateToProps = (words) => {\r\n    return {\r\n\r\n        //returning an object which contains the data\r\n        words\r\n    }\r\n}\r\n\r\n//Tha above fn passed as a first argument to connect and will be called every time when the redux store changes\r\n//The second argument handleInitialData if not written also it will receive dispatch by default. Dispatch is the way to trigger \r\n//the state changes\r\n\r\nexport default connect(mapStateToProps, { handleInitialData })(Search)","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport { createTheme, ThemeProvider } from \"@material-ui/core/styles\";\r\nimport Header from \"./components/Header\";\r\nimport Words from \"./components/Words_List\";\r\nimport Search from \"./components/Search\";\r\n//notistack is a notification library to display notifications on your web apps\r\nimport { SnackbarProvider } from \"notistack\";\r\nimport { handleInitialData } from \"./actions/list_action\";\r\n\r\nconst theme = createTheme({\r\n  typography: {\r\n    fontFamily: \"'Kumbh Sans', sans-serif\",\r\n  }\r\n})\r\n\r\nclass App extends Component {\r\n\r\n  //componentDidMount is the part of initialization where can get displayed all the words list that were initialized.\r\n  componentDidMount() {\r\n    this.props.handleInitialData()\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      //Theme provider takes in a prop called theme , this props takes an object where We can add any property for styled components.\r\n      \r\n      //Snackbarprovider:- wrap all components that should display snackbars with the SnackbarProvider component, e.g. by wrapping \r\n      //your router with it.\r\n      <ThemeProvider theme={theme}>\r\n       <SnackbarProvider\r\n       //anchorOrigin is used to set the position of the popover(alert box) used from material-ui\r\n        anchorOrigin={{\r\n            vertical: 'bottom',\r\n            horizontal: 'center',\r\n          }}\r\n        >  \r\n          <BrowserRouter>\r\n            <Switch>\r\n              <Route exact path='/'>\r\n                <Header />\r\n                <Words text=\"Words List\" />\r\n              </Route>\r\n              <Route path='/search'>\r\n                <Search />\r\n              </Route>\r\n            </Switch>\r\n          </BrowserRouter>\r\n        </SnackbarProvider>\r\n      </ThemeProvider>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (words) => {\r\n  return {\r\n    words\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, { handleInitialData })(App)","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { createStore } from \"redux\";\r\nimport { Provider } from \"react-redux\";\r\nimport reducer from \"./reducers/list_reducer\";\r\nimport middleware from \"./middleware/store\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\n\r\nconst store = createStore(reducer, middleware)\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n)\r\n"," import { ADD_NEW_WORD, RECEIVE_WORDS } from \"../actions/list_action\";\r\n\r\nexport default (state = [], action) => {\r\n    switch (action.type) {\r\n        case RECEIVE_WORDS:\r\n            return [\r\n                ...state,\r\n                ...action.words\r\n            ]\r\n        case ADD_NEW_WORD:\r\n            return [\r\n                ...state,\r\n                action.word\r\n            ]\r\n        default:\r\n            return state\r\n    }\r\n}"],"sourceRoot":""}